import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import _ from 'lodash';
import { Table, Segment, Header } from 'semantic-ui-react';

import { FETCH_WEBVULNERABILITY_BY_ID } from '../../actions/webvulnerability';

class Vulnerability extends Component {
  componentWillMount = () => {
    this.props.fetchWebVulnerabilityByID(this.props.match.params.id);
  }

  componentWillReceiveProps = (nextProps) => {
    const { webvulnerability } = nextProps;
    // eslint-disable-next-line max-len
    if (webvulnerability && !webvulnerability.fetchLoading && (this.state && this.state.vulnerability.fetchLoading)) {
      this.setState({ vulnerability: webvulnerability });
    } else if (webvulnerability && (webvulnerability.fetchLoading || webvulnerability.fetchError)) {
      this.setState({ vulnerability: webvulnerability });
    }
  }

  renderVulnInfo = () => {
    const style = {
      tableCell: {
        padding: '5px',
        fontSize: '12px',
        wordWrap: 'break-word',
        maxWidth: '65vw',
      },
    };
    const info = [
      {
        fieldName: 'ID',
        value: this.state.vulnerability.id,
        key: 'id',
      },
      {
        fieldName: 'Title',
        value: this.state.vulnerability.title,
        key: 'title',
      },
      {
        fieldName: 'Description',
        value: this.state.vulnerability.description,
        key: 'description',
      },
      {
        fieldName: 'Request',
        value: this.state.vulnerability.request,
        key: 'request',
      },
      {
        fieldName: 'Response',
        value: this.state.vulnerability.response,
        key: 'response',
      },
      {
        fieldName: 'Affects',
        value: this.state.vulnerability.affects,
        key: 'affects',
      },
      {
        fieldName: 'Impact',
        value: this.state.vulnerability.impact,
        key: 'impact',
      },
      {
        fieldName: 'Solution',
        value: this.state.vulnerability.solution,
        key: 'solution',
      },
      {
        fieldName: 'cvss_score',
        value: this.state.vulnerability.cvss_score,
        key: 'cvss_score',
      },
      {
        fieldName: 'Risk Factor',
        value: this.state.vulnerability.risk_factor,
        key: 'risk_factor',
      },
      {
        fieldName: 'Severity',
        value: this.state.vulnerability.severity,
        key: 'severity',
      },
      {
        fieldName: 'CWE',
        value: this.state.vulnerability.cwe,
        key: 'cwe',
      },
    ];

    return _.map(info, (field) => {
      const { fieldName, value } = field;
      const fieldValue = typeof value === 'string' ?
        value.split('\n').map((str, i) => (<span key={str.concat(i)}>{str}<br /></span>)) : value;
      return (
        <Table.Row style={field.key === 'id' ? { backgroundColor: '#c6c6c6' } : {}} key={field.key}>
          <Table.Cell
            disabled={!value && value !== 0}
            singleLine
            style={style.tableCell}
          >
            <b>{fieldName}</b>
          </Table.Cell>
          <Table.Cell
            disabled={!value && value !== 0}
            style={style.tableCell}
          >
            {fieldValue}
          </Table.Cell>
        </Table.Row>
      );
    });
  }

  render() {
    if (!this.state || !this.state.vulnerability) return null;
    const RED = '#da1c15';
    const YELLOW = '#f6ad26';
    const GREEN = '#7db346';
    const BLUE = '#5280fb';
    const colorCodes = [BLUE, GREEN, YELLOW, RED];
    const vulnerabilityColorCode = colorCodes[this.state.vulnerability.risk_factor];
    const textColor = vulnerabilityColorCode === RED ? '#f8f8f2' : '#000000';

    const style = {
      header: {
        color: textColor,
        backgroundColor: vulnerabilityColorCode,
        border: `1px solid${vulnerabilityColorCode}`,
        fill: vulnerabilityColorCode,
      },
      segment: {
        border: `1px solid${vulnerabilityColorCode}`,
        padding: '8px',
      },
      tableCell: {
        padding: '5px',
      },
    };

    return (
      <div>
        <Header style={style.header} attached='top'>Vulnerability</Header>
        <Segment style={style.segment} attached>
          <Table celled striped selectable>
            <Table.Body>
              {this.renderVulnInfo()}
            </Table.Body>
          </Table>
        </Segment>
      </div>
    );
  }
}

Vulnerability.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.shape({
      id: PropTypes.string.isRequired,
    }).isRequired,
  }).isRequired,
  fetchWebVulnerabilityByID: PropTypes.func.isRequired,
  webvulnerability: PropTypes.shape({

  }).isRequired,
};

const mapDispatchToProps = dispatch => ({
  fetchWebVulnerabilityByID: id => dispatch(FETCH_WEBVULNERABILITY_BY_ID(id)),
});

const mapStateToProps = (state, ownProps) => ({
  webvulnerability: _.find(state.webvulnerabilities.list, { id: parseInt(ownProps.match.params.id, 10) }),
});

export default connect(mapStateToProps, mapDispatchToProps)(Vulnerability);
