import React, { Component } from 'react';
import _ from 'lodash';
import { Table, Segment, Header } from 'semantic-ui-react';

class Vulnerability extends Component {

  renderVulnInfo = () => {
    const style = {
      tableCell: {
        padding: '5px',
        fontSize: '12px',
      },
    }

    const info = [
      {
        fieldName: 'ID',
        value: this.props.vuln.id,
        key: 'id'
      },
      {
        fieldName: 'Title',
        value: this.props.vuln.title,
        key: 'title'
      },
      {
        fieldName: 'Summary',
        value: this.props.vuln.summary,
        key: 'summary'
      },
      {
        fieldName: 'Impact',
        value: this.props.vuln.impact,
        key: 'impact'
      },
      {
        fieldName: 'Solution',
        value: this.props.vuln.solution,
        key: 'solution'
      },
      {
        fieldName: 'cvss_score',
        value: this.props.vuln.cvss_score,
        key: 'cvss_score'
      },
      {
        fieldName: 'Risk Factor',
        value: this.props.vuln.risk_factor,
        key: 'risk_factor'
      },
      {
        fieldName: 'Exploitable',
        value: this.props.vuln.exploitable,
        key: 'exploitable'
      },
      {
        fieldName: 'Output',
        value: this.props.vuln.output,
        key: 'output'
      },
      {
        fieldName: 'Category',
        value: this.props.vuln.category,
        key: 'category'
      },
      {
        fieldName: 'Exploit-DB ID',
        value: this.props.vuln.edb_id,
        key: 'edb_id'
      },
      {
        fieldName: 'Metasploit package name',
        value: this.props.vuln.metasploit_name,
        key: 'metasploit_name'
      },
      {
        fieldName: 'Exploit Framework Metasploit',
        value: this.props.vuln.exploit_framework_metasploit,
        key: 'exploit_framework_metasploit'
      },
      {
        fieldName: 'Exploit Framework Core',
        value: this.props.vuln.exploit_framework_core,
        key: 'exploit_framework_core'
      },
      {
        fieldName: 'Exploit Framework Canvas',
        value: this.props.vuln.exploit_framework_canvas,
        key: 'exploit_framework_canvas'
      },
      {
        fieldName: 'Vulnerability Publication Date',
        value: this.props.vuln.vuln_publication_date,
        key: 'vuln_publication_date'
      },
      {
        fieldName: 'Vulnerability ID',
        value: this.props.vuln.vid,
        key: 'vid'
      },
      {
        fieldName: 'CVE',
        value: this.props.vuln.cve,
        key: 'cve'
      },
    ];

    return _.map(info, (field) => {
      const { fieldName, value } = field;
      const fieldValue = typeof value === 'string' ? value.split('\n').map((str) => (<span>{str}<br/></span>)) : value;
      return (
        <Table.Row style={field.key === 'id' ? {backgroundColor: '#c6c6c6'} : {}} key={field.key}>
          <Table.Cell disabled={!value && value !== 0} singleLine style={style.tableCell}><b>{fieldName}</b></Table.Cell>
          <Table.Cell disabled={!value && value !== 0} style={style.tableCell}>{fieldValue}</Table.Cell>
        </Table.Row>
      );
    })
  }

  render() {
    const RED = '#da1c15';
    const YELLOW = '#f6ad26';
    const GREEN = '#7db346';
    const BLUE = '#5280fb';
    const colorCodes = [BLUE,GREEN,YELLOW,RED];
    const vulnerabilityColorCode = colorCodes[this.props.vuln.risk_factor];
    const textColor = vulnerabilityColorCode === RED ? '#f8f8f2' : '#000000';

    const style = {
      header: {
        color: textColor,
        backgroundColor: vulnerabilityColorCode,
        border: '1px solid' + vulnerabilityColorCode,
        fill: vulnerabilityColorCode,
      },
      segment: {
        border: '1px solid' + vulnerabilityColorCode,
        padding: '8px',
      },
      tableCell: {
        padding: '5px',
      }
    }

    return (
      <div>
        <Header style={style.header} attached='top'>Vulnerability</Header>
        <Segment style={style.segment} attached>
          <Table celled={true} striped={true} selectable={true}>
            <Table.Body>
              {this.renderVulnInfo()}
            </Table.Body>
          </Table>
        </Segment>
      </div>
    );
  }
}

export default Vulnerability;